name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Nx computation artifacts
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-cache-${{ runner.os }}-${{ hashFiles('nx.json', 'package.json', 'pnpm-lock.yaml') }}
          restore-keys: |
            nx-cache-${{ runner.os }}-

      - name: Build agent-api
        run: pnpm exec nx run agent-api:build --with-deps

      - name: Build dashboard-api
        run: pnpm exec nx run dashboard-api:build --with-deps

      - name: Include deployment scripts
        run: |
          mkdir -p dist/scripts
          cp scripts/restart.sh dist/scripts/restart.sh
          chmod +x dist/scripts/restart.sh

      - name: Copy Prisma schema and migrations
        run: |
          mkdir -p dist/shared/database/prisma
          cp -r shared/database/prisma/schema.prisma dist/shared/database/prisma/
          cp -r shared/database/prisma/migrations dist/shared/database/prisma/

      - name: Copy package.json files for dependency installation
        run: |
          # Root package.json for pnpm workspace
          cp package.json dist/package.json
          cp pnpm-lock.yaml dist/pnpm-lock.yaml
          cp pnpm-workspace.yaml dist/pnpm-workspace.yaml
          
          # App package.json files
          cp apps/agent-api/package.json dist/apps/agent-api/package.json
          cp apps/dashboard-api/package.json dist/apps/dashboard-api/package.json

      - name: Upload dist artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist/**
          if-no-files-found: error

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      REMOTE_PATH: /var/www/staff-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}

      - name: Ensure remote directory exists
        run: |
          ssh -i ~/.ssh/id_ed25519 -p "$PORT" "$USERNAME@$HOST" "mkdir -p '$REMOTE_PATH'"
        env:
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          USERNAME: ${{ secrets.USERNAME }}

      - name: Sync build to server
        run: |
          rsync -az --delete -e "ssh -i ~/.ssh/id_ed25519 -p $PORT" dist/ "$USERNAME@$HOST:$REMOTE_PATH/"
        env:
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          USERNAME: ${{ secrets.USERNAME }}

      - name: Restart application
        run: |
          ssh -i ~/.ssh/id_ed25519 -p "$PORT" "$USERNAME@$HOST" "cd '$REMOTE_PATH' && chmod +x ./scripts/restart.sh && ./scripts/restart.sh"
        env:
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          USERNAME: ${{ secrets.USERNAME }}
